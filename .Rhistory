ggplot(df,aes(x=sample_Species,y=mean,fill=Family))+scale_fill_manual(values=mycolors)+geom_bar(stat="identity")+coord_flip()+theme_classic()+scale_x_continuous(limits=c(0,0.001))
ggplot(df,aes(x=sample_Species,y=mean,fill=Family))+scale_fill_manual(values=mycolors)+geom_bar(stat="identity")+coord_flip()+theme_classic()+scale_x_continuous(limits=c(0,0.0001))
ggplot(df,aes(x=sample_Species,y=mean,fill=Family))+scale_fill_manual(values=mycolors)+geom_bar(stat="identity")+coord_flip()+theme_classic()+scale_y_continuous(limits=c(0,0.0001))
ggplot(df,aes(x=sample_Species,y=mean,fill=Family))+scale_fill_manual(values=mycolors)+geom_bar(stat="identity")+coord_flip()+theme_classic()+scale_y_continuous(limits=c(0,0.00001))
ggplot(df,aes(x=sample_Species,y=mean,fill=Family))+scale_fill_manual(values=mycolors)+geom_bar(stat="identity")+coord_flip()+theme_classic()+scale_y_continuous(limits=c(0,0.001))
p5=ggplot(df,aes(x=sample_Species,y=mean,fill=Family))+scale_fill_manual(values=mycolors)+geom_bar(stat="identity")+coord_flip()+theme_classic()+scale_y_continuous(limits=c(0,0.001))
df1<-dat%>%filter(Country=="Uganda") %>% group_by(sample_Species,Family) %>% summarise(mean=mean(Abundance))%>% filter(Family != "NA")
p6=ggplot(df1,aes(x=sample_Species,y=mean,fill=Family))+scale_fill_manual(values=mycolors)+geom_bar(stat="identity")+coord_flip()+theme_classic()+scale_y_continuous(limits=c(0,0.001))
p6
ggarrange(p5,p6,common.legend = TRUE)
ggarrange(p5,p6,common.legend = TRUE,legend="bottom")
ggarrange(p5,p6,common.legend = TRUE,legend="bottom",labels=c("Moukalaba","Kibale"))
ggsave("bacteroidetesRA.pdf"),width=12,height=5
ggsave("bacteroidetesRA.pdf",width=12,height=5,dpi=600)
#make sample metadata matrix
meta = data.frame(sample_data(physeq))
#read host phylogeny tree
con=read.tree("species.nwk")
labels(con) <- sub("_"," ", labels(con))
#plotting trees
plot(con, no.margin=TRUE)
plot(con, no.margin=TRUE)
ggsave("speciestree.pdf")
as.dendrogram(con)
as.dendrogram(con) %>% plot()
dendrogram=as.dendrogram(con)
##changing the label color based on the country
#extract country
color_country = as.factor(sample_data(physeq)$Country)
#substitute the number to different color
color_country = gsub("Uganda","#d1495b",color_country)
color_country = gsub("Gabon","#edae49",color_country)
#sort the colr based on their order in dendrogram
color_country <- color_country[order.dendrogram(dendrogram)]
color_country
##changing the leave color based on the species
color_spp = as.factor(sample_data(physeq)$Species)
color_spp
#substitute the number to different color
color_spp = gsub("Cercocebus torquatus","#E41A1C",color_spp)
color_spp = gsub("Cercopithecus ascanius","#815375",color_spp)
color_spp = gsub("Cercopithecus cephus","#3A85A8",color_spp)
color_spp = gsub("Cercopithecus mitis","#46A169",color_spp)
color_spp = gsub("Cercopithecus nictitans","#629363",color_spp)
color_spp = gsub("Cercopithecus pogonias","#8D5B96",color_spp)
color_spp = gsub("Chlorocebus aethiops","#C4625D",color_spp)
color_spp = gsub("Colobus guereza","#FF7F00",color_spp)
color_spp = gsub("Gorilla gorilla","#FFC81D",color_spp)
color_spp = gsub("Lophocebus albigena","#F2E631",color_spp)
color_spp = gsub("Miopithecus ogouensis","#BF862B",color_spp)
color_spp = gsub("Pan troglodytes","#BD6253",color_spp)
color_spp = gsub("Papio anubis","#EB7AA9",color_spp)
color_spp = gsub("Piliocolobus badius","#CE8BAE",color_spp)
ID_spp= as.factor(sample_data(physeq)$ID_spp)
ID_spp <- ID_spp[order.dendrogram(dendrogram)]
#sort the colr based on their order in dendrogram
color_spp <- color_spp[order.dendrogram(dendrogram)]
#replace the labels in dendrogram by new color
labels_colors(dendrogram) <- color_spp
labels_colors(dendrogram)
dendrogram %>% set("leaves_pch", 19) %>%  # node point type
set("leaves_cex",0.4) %>%  # node point size
set("labels",ID_spp)%>%
set("leaves_col", color_country) %>% # node point color
set("labels_color", color_spp) %>%  # label_color
set("labels_cex",0.4) %>%
plot(main = "Unweighted UniFrac Dendrogram by Ward")
color_spp = unique(sample_data(physeq)$Species)
sppcol=c("#CFA42D", "#F1948A", "#3C899E", "#49A75A", "#FE58C1", "#9F5196", "#F88F32", "#85C1E9", "#FFF52F", "#E41A1C", "#922B21","#2E4053", "#7D4BC6", "#999999")
labels_colors(dendrogram)
labels_colors(dendrogram) <-color_spp
dendrogram %>% set("leaves_pch", 19) %>%  # node point type
set("leaves_cex",0.4) %>%  # node point size
set("labels",ID_spp)%>%
set("leaves_col", color_country) %>% # node point color
set("labels_color", color_spp) %>%  # label_color
set("labels_cex",0.4) %>%
plot()
labels_colors(dendrogram)
labels_colors(dendrogram) <-sppcol
dendrogram %>% set("leaves_pch", 19) %>%  # node point type
set("leaves_cex",0.4) %>%  # node point size
set("labels",ID_spp)%>%
set("leaves_col", color_country) %>% # node point color
set("labels_color", color_spp) %>%  # label_color
set("labels_cex",0.4) %>%
plot()
labels_colors(dendrogram) <-sppcol
labels_colors(dendrogram)
dendrogram %>% set("leaves_pch", 19) %>%  # node point type
set("leaves_cex",0.4) %>%  # node point size
set("labels",ID_spp)%>%
set("leaves_col", color_country) %>% # node point color
set("labels_color", sppcol) %>%  # label_color
set("labels_cex",0.4) %>%
plot()
dendrogram %>% set("leaves_pch", 19) %>%  # node point type
set("leaves_cex",0.4) %>%  # node point size
set("labels",Species)%>%
set("labels_color", sppcol) %>%  # label_color
set("labels_cex",0.4) %>%
plot()
species <- as.factor(unique(sample_data(physeq)$Species))
dendrogram %>% set("leaves_pch", 19) %>%  # node point type
set("leaves_cex",0.4) %>%  # node point size
set("labels",Species)%>%
set("labels_color", sppcol) %>%  # label_color
set("labels_cex",0.4) %>%
plot()
dendrogram %>% set("leaves_pch", 19) %>%  # node point type
set("leaves_cex",0.4) %>%  # node point size
set("labels",species)%>%
set("labels_color", sppcol) %>%  # label_color
set("labels_cex",0.4) %>%
plot()
dendrogram %>% set("leaves_pch", 19) %>%  # node point type
set("labels",species)%>%
set("labels_color", sppcol) %>%  # label_color
set("labels_cex",0.4) %>%
plot()
View(meta)
c <- unique(meta$Species)
c
dendrogram %>%
set("labels",species)%>%
set("labels_color", sppcol) %>%  # label_color
set("labels_cex",0.4) %>%
plot()
dendrogram %>%
set("labels",species)%>%
set("labels_color", sppcol) %>%  # label_color
set("labels_cex",1) %>%
plot()
dendrogram %>%
set("labels",species)%>%
set("labels_color", sppcol) %>%  # label_color
set("labels_cex",0.8) %>%
plot()
library(openxlsx)
library(dplyr)
library(tidyverse)
setwd("/Volumes/2TB/Seas_JMaq")
meta <- read.xlsx("meta.xlsx")
SCFA <- read.xlsx("SCFA.xlsx")
meta$DigestibilityID <- toupper(meta$DigestibilityID)
meta <- meta %>% mutate(Substrate = case_when(
str_detect(DigestibilityID,"CH")~"Chow",
str_detect(DigestibilityID,"LF")~"Leaf",
str_detect(DigestibilityID,"A")~"Before fermentation"
))
View(SCFA)
library(ggplot2)
SCFA %>% filter(Substrate=="Leaf") %>%ggplot(aes(x=Month,y=Gas_24hr))+geom_boxplot()
SCFA$Month = factor(SCFA$Month,levels = month.name)
View(SCFA)
SCFA %>% filter(Substrate=="Leaf") %>%ggplot(aes(x=Month,y=Gas_24hr))+geom_boxplot()
SCFA %>% filter(Substrate=="Chow") %>%ggplot(aes(x=Month,y=Gas_24hr))+geom_boxplot()
#Create column for month and year
meta <- meta %>% mutate(Month = str(DigestibilityID,1,4))
?str()
#Create column for month and year
meta <- meta %>% mutate(Month = substr(DigestibilityID,1,4))
?md()
library(lubridate)
?md()
date(meta$Month)%>%head
write.xlsx(meta,"meta2.xlsx")
meta <- read.xlsx("meta.xlsx")
meta$Date <- as.Date(meta$Date)
ymd(meta$Date)
meta$Date <- ymd(meta$Date)
meta$Year <- year(meta$Date)
meta$Month <- month(meta$Date)
?month
meta$Month <- month(meta$Date,label=TRUE)
library(phyloseq)
libray(qiime2R)
library(qiime2R)
set.seed(1234)
setwd("/Volumes/2TB/Seas_JMaq")
?qiime2R::qza_to_phyloseq()
physeq<-qza_to_phyloseq(features="filtered-table-AllSeas.qza", tree="insertion-tree.qza", taxonomy="taxonomy.qza", metdata=meta)
write_tsv(meta,"meta.tsv")
physeq<-qza_to_phyloseq(features="filtered-table-AllSeas.qza", tree="insertion-tree.qza", taxonomy="taxonomy.qza", metdata="meta.tsv")
physeq<-qza_to_phyloseq(features="filtered-table-AllSeas.qza", tree="insertion-tree.qza", taxonomy="taxonomy.qza", metadata=meta)
physeq<-qza_to_phyloseq(features="filtered-table-AllSeas.qza", tree="insertion-tree.qza", taxonomy="taxonomy.qza", metadata="meta.tsv")
View(meta)
meta <- meta %>% rename("Nextera_ID"="SampleID")
meta <- meta %>% rename("SampleID"="Nextera_ID")
write_tsv(meta,"meta.tsv")
physeq<-qza_to_phyloseq(features="filtered-table-AllSeas.qza", tree="insertion-tree.qza", taxonomy="taxonomy.qza", metadata="meta.tsv")
physeq<-qza_to_phyloseq(features="filtered-table-AllSeas.qza", tree="insertion-tree.qza", taxonomy="taxonomy.qza", metadata="meta.tsv")
physeq<-qza_to_phyloseq(features="filtered-table-AllSeas.qza", tree="insertion-tree.qza", taxonomy="taxonomy.qza", metadata=meta)
tree <- read_qza("insertion-tree.qza")
otu <- read_qza("filtered-table-AllSeas.qza")
tax <- read("taxonomy.qza")
tax <- read_qza("taxonomy.qza")
metdata <- sample_data(meta)
View(metdata)
View(metdata)
View(meta)
View(metdata)
View(meta)
View(meta)
View(meta)
View(metdata)
View(meta)
View(metdata)
metadata
metdata
?sample_data()
rm(metdata)
metadata <- sample_data(meta)
View(metadata)
View(meta)
View(metadata)
View(otu)
otu <- otu_table(otu$data)
otu <- otu_table(otu$data,taxa_are_rows = TRUE)
View(metadata)
metadata <- sample_data(metadata)
View(meta)
metadata <- column_to_rownames("SampleID")
meta <- column_to_rownames("SampleID")
?column_to_rownames
class(meta)
class(metadata)
meta <- column_to_rownames(meta,"SampleID")
View(meta)
meta <- unique(meta)
meta <- column_to_rownames(meta,"SampleID")
row.names(meta)
row.names(meta) <- null
row.names(meta) = null
row.names(meta)<- meta$SampleID
metadata = sample_data(meta)
View(metadata)
tax_table<-do.call(rbind, strsplit(as.character(taxonomy$data$Taxon), "; "))
tax_table<-do.call(rbind, strsplit(as.character(tax$data$Taxon), "; "))
colnames(tax_table)<-c("Kingdom","Phylum","Class","Order","Family","Genus","Species")
rownames(tax_table)<-taxonomy$data$Feature.ID
rownames(tax_table)<-tax$data$Feature.ID
View(tax_table)
physeq <- phyloseq(otu,phy_tree(tree$data),tax_table(tax_table),sample_data(metadata))
physeq=subset_taxa(physeq,
Kingdom == "Bacteria" &
Family  != "mitochondria" &
Class   != "Chloroplast" | is.na(Class))
physeq <- phyloseq(otu,phy_tree(tree$data),tax_table(tax_table),sample_data(metadata))
physeq=subset_taxa(physeq,
Kingdom == "k__Bacteria" & #subset for bacteria kingdom
Family  != "f__mitochondria") #remove mitochondria
sort(sample_sums(physeq))
#remove samples with insufficient sequencing depth
physeq=subset_samples(physeq, sample_names(physeq) != "Di038"&
sample_names(physeq) != "Di096"&
sample_names(physeq) !="Di049"&
sample_names(physeq) != "Di072"&
sample_names(physeq) != "Di061"&
sample_names(physeq) != "Di071"&
sample_names(physeq) != "Di127")
save.image("/Volumes/2TB/Seas_JMaq/Seas_All.RData")
p=ggrare(physeq,color="Month",se=FALSE)
library(ranacapa)
library(vegan)
p=rarecurve(t(otu_table(physeq)),step=50,cex=0.5)
?rarecurve()
?rareslope
sort(sample_sums(physeq))
slope = rareslope(t(otu_table(physeq)),9530)
head(slope)
slope <- data.frame(slope)
write.csv(slope,"slope.csv")
rm(slope)
plot_bar(physeq,fill="Phylum") +facet_wrap(~Month,scales="free-x")
View(tax)
View(tax_table)
plot_bar(physeq,fill="Phylum") +facet_wrap(~Month,scales="free_x")
?plot_bar
?transform_sample_counts()
physeq <- transform_sample_counts(physeq,function(x) x/sum(x))
plot_bar(physeq,fill="Phylum") +facet_wrap(~Month,scales="free_x")
plot_bar(physeq,fill="Phylum") +facet_wrap(~Month,scales="free_x")+geom_bar(color="Phylum")
dat = psmelt(phy)
dat$Phylum = as.character(dat$Phylum)
dat = psmelt(physeq)
nb.cols <- length(unique(dat$Phylum))
length(unique(dat$Phylum))
#number of colors needed
mycolors <- colorRampPalette(brewer.pal(9, "Set1"))(nb.cols)
library(RColorBrewer)
#number of colors needed
mycolors <- colorRampPalette(brewer.pal(9, "Set1"))(nb.cols)
head(dat)
ggplot(data=dat, aes(x=Sample, y=Abundance, fill=Phylum))+scale_fill_manual(values=mycolors)+facet_wrap(~Month,scales="free_x")
ggplot(data=dat, aes(x=Sample, y=Abundance, fill=Phylum))+facet_wrap(~Month,scales="free_x")
ggplot(data=dat, aes(x=Sample, y=Abundance, fill=Phylum))+scale_fill_manual(values=mycolors)
ggplot(data=dat, aes(x=Sample, y=Abundance, fill=Phylum))+scale_fill_manual(values=mycolors)+facet_wrap(~Month,scales="free_x")+geom_bar("stack")
?geom_bar
ggplot(data=dat, aes(x=Sample, y=Abundance)+scale_fill_manual(values=mycolors)+facet_wrap(~Month,scales="free_x")+geom_bar(aes(fill=Phylum)))
ggplot(data=dat, aes(x=Sample, y=Abundance, fill=Phylum))+scale_fill_manual(values=mycolors)+facet_wrap(~Month,scales="free_x")+geom_bar(stat="identity")
+facet_wrap(~Month,scales="free_x")+theme(axis.text.x=element_text(angle=90, hjust=1))
print(phy_p)
phy_p<- ggplot(data=dat, aes(x=Sample, y=Abundance, fill=Phylum))+geom_bar(stat="identity")+scale_fill_manual(values=mycolors)+facet_wrap(~Month,scales="free_x")+theme(axis.text.x=element_text(angle=90, hjust=1))
print(phy_p)
View(dat)
#plot composition for before fermentation
phy_p<- ggplot(data=dat[dat$Before.After=="Before",], aes(x=Sample, y=Abundance, fill=Phylum))+geom_bar(stat="identity")+scale_fill_manual(values=mycolors)+facet_wrap(~Month,scales="free_x")+theme(axis.text.x=element_text(angle=90, hjust=1))
print(phy_p)
#plot composition for after fermentation
phy_p2 <-ggplot(data=dat[dat$Before.After=="After",], aes(x=Sample, y=Abundance, fill=Phylum))+geom_bar(stat="identity")+scale_fill_manual(values=mycolors)+facet_wrap(~Month,scales="free_x")+theme(axis.text.x=element_text(angle=90, hjust=1))
print(phy_p2)
# unweighted UniFrac
wunifrac_dist = distance(physeq, method="unifrac", weighted=F)
wunifrac=ordinate(physeq, "PCoA", "unifrac", weighted=TRUE)
plot_ordination(physeq, wunifrac,type="samples", color="Month",shape="Before.After", title = "Unweighted Unifrac")+theme_classic()+geom_point(size=3)
load("/Volumes/2TB/Seas_JMaq/SeasonalGutMicrobiome(NoFerm).RData")
phy <- physeq %>% transform_sample_counts(function(x) x/sum(x)) %>% subset_samples(Before.After=="Before")
meta <- sample_data(phy) %>% data.frame()
meta <- meta %>% left_join(Leaf,by=c("Ind_ID"="ID"), suffix = c("", ".y")) %>%
column_to_rownames("SampleID")%>%
select_at(vars(-ends_with(".y")))
sample_data(phy) <- sample_data(meta) #replace the original metadata in physeq
library(dplyr)
library(tidyverse)
library(phyloseq)
library(vegan)
library(ggplot2)
library(ggpubr)
library(reshape2)
load("/Volumes/2TB/Seas_JMaq/SeasonalGutMicrobiome(NoFerm).RData")
phy <- physeq %>% transform_sample_counts(function(x) x/sum(x)) %>% subset_samples(Before.After=="Before")
meta <- sample_data(phy) %>% data.frame()
meta <- meta %>% left_join(Leaf,by=c("Ind_ID"="ID"), suffix = c("", ".y")) %>%
column_to_rownames("SampleID")%>%
select_at(vars(-ends_with(".y")))
sample_data(phy) <- sample_data(meta) #replace the original metadata in physeq
# Taxonomic composition at phyla level
dat = psmelt(phy)
write.csv(dat,"dat.csv")
dat$Phylum = as.character(dat$Phylum)
nb.cols <- length(unique(dat$Phylum)) #number of colors needed
mycolors <- colorRampPalette(brewer.pal(9, "Set1"))(nb.cols)
phy_p<- ggplot(data=dat, aes(x=Sample, y=Abundance, fill=Phylum))+geom_bar(stat="identity")+scale_fill_manual(values=mycolors)+facet_wrap(~Month,scales="free_x")+theme(axis.text.x=element_text(angle=90, hjust=1))
print(phy_p)
ggplot(data=dat, aes(x=Sample, y=Abundance, fill=Phylum))+geom_bar(stat="identity")+scale_fill_manual(values=mycolors)+facet_wrap(~Month,scales="free_x")+theme(axis.text.x=element_text(angle=90, hjust=1))
ggplot(data=dat, aes(x=Sample, y=Abundance, fill=Phylum,color=Phylum))+geom_bar(stat="identity")+scale_fill_manual(values=mycolors)+facet_wrap(~Month,scales="free_x")+theme(axis.text.x=element_text(angle=90, hjust=1))
?tax_glom
# Taxonomic composition at phyla level
phy1 <- tax_glom(phy,"Phylum")
dat = psmelt(phy1)
dat$Phylum = as.character(dat$Phylum)
nb.cols <- length(unique(dat$Phylum)) #number of colors needed
mycolors <- colorRampPalette(brewer.pal(9, "Set1"))(nb.cols)
phy_p<- ggplot(data=dat, aes(x=Sample, y=Abundance, fill=Phylum))+geom_bar(stat="identity")+scale_fill_manual(values=mycolors)+facet_wrap(~Month,scales="free_x")+theme(axis.text.x=element_text(angle=90, hjust=1))
print(phy_p)
library(RColorBrewer)
ggsave("Composition_phyla.pdf",height=12,width=10)
?merge_samples()
phy1 <- merge_samples(phy1,"Month")
phy1
ggplot(data=dat, aes(x=Sample, y=Abundance, fill=Phylum))+geom_bar(stat="identity")+scale_fill_manual(values=mycolors)+facet_wrap(~Month,scales="free_x")+theme(axis.text.x=element_text(angle=90, hjust=1))
dat = psmelt(phy1)
phy_p<- ggplot(data=dat, aes(x=Sample, y=Abundance, fill=Phylum))+geom_bar(stat="identity")+scale_fill_manual(values=mycolors)+theme(axis.text.x=element_text(angle=90, hjust=1))
print(phy_p)
phy1<-phy1 %>% transform_sample_counts(function(x) x/sum(x))
dat = psmelt(phy1)
phy_p<- ggplot(data=dat, aes(x=Sample, y=Abundance, fill=Phylum))+geom_bar(stat="identity")+scale_fill_manual(values=mycolors)+theme(axis.text.x=element_text(angle=90, hjust=1))
phy_p
dat$Sample = factor(dat$Sample,levels=month.abb)
ggplot(data=dat, aes(x=Sample, y=Abundance, fill=Phylum))+geom_bar(stat="identity")+scale_fill_manual(values=mycolors)+theme(axis.text.x=element_text(angle=90, hjust=1))
ggsave("comp_phyla_month.pdf",wdith=8,height=5)
ggsave("comp_phyla_month.pdf",width=8,height=5)
ggplot(data=dat, aes(x=Sample, y=Abundance, fill=Phylum))+geom_bar(stat="identity")+scale_fill_manual(values=mycolors)+theme(axis.text.x=element_text(angle=90, hjust=1))+theme_classic()
ggsave("comp_phyla_month.pdf",width=8,height=5)
require(vegan)
require(phyloseq)
require(openxlsx)
require(lubridate)
require(tidyverse)
require(dplyr)
load("/Volumes/GoogleDrive/My Drive/To Do/Gut microbe_Japanese Macaque/Crop-raiding/cropphyseq.RData")
setwd("/Volumes/GoogleDrive/My Drive/To Do/Gut microbe_Japanese Macaque/Crop-raiding/Sasayama")
sasay <- subset_samples(physeq,Site=="Sasayama")
sasay <- subset_samples(physeq,Site=="Sasayama")
sasa_meta <- read.xlsx("SampleList_Sasayama.xlsx",detectDates = TRUE)%>%
mutate(Date= ymd(Date),month=month(Date),year=year(Date),Time=ym(paste(year,month)))
sasa_meta <- sasa_meta %>% mutate(Kagai.level=replace_na(Kagai.level))
knitr::opts_chunk$set(echo = TRUE)
require(vegan)
require(phyloseq)
require(openxlsx)
require(lubridate)
require(tidyverse)
require(dplyr)
require(plotly)
load("/Volumes/GoogleDrive/My Drive/To Do/Gut microbe_Japanese Macaque/Crop-raiding/cropphyseq.RData")
setwd("/Volumes/GoogleDrive/My Drive/To Do/Gut microbe_Japanese Macaque/Crop-raiding/Sasayama")
sasay <- subset_samples(physeq,Site=="Sasayama")
sasa_meta <- read.xlsx("SampleList_Sasayama.xlsx",detectDates = TRUE)%>%
mutate(Date= ymd(Date),month=month(Date),year=year(Date),Time=ym(paste(year,month)))
sasa_meta <- sasa_meta %>% mutate(Kagai.level=replace_na(Kagai.level))
range <- read.xlsx("Ranging.xlsx")
range <- range %>% mutate(Time = ym(paste(Year,Month)))
sasa_meta <- sasa_meta %>% left_join(range,by = c("Time")) %>% select(-c("year"))
rownames(sasa_meta) <- sasa_meta$SampleID
sample_data(sasay) <- sample_data(sasa_meta)
sasay <- subset_samples(sasay, SampleID != "SA4-s" & SampleID != "SA33-s" )
sasa_meta<- sample_data(sasay)
sasa_meta2 <- read.xlsx("sasa_meta.xlsx",detectDates = TRUE)%>%
mutate(Date= ymd(Date),month=month(Date),year=year(Date),Time=ym(paste(year,month)))
View(sasa_meta2)
sample_data(sasay2)<- sample_data(sasa_meta2)
#original physeq is sasay
#physeq without possible contamination
sasay2<- subset_samples(sasay,Contamin=="F")
#original physeq is sasay
sasa_meta2 <- read.xlsx("sasa_meta.xlsx",detectDates = TRUE)%>%
mutate(Date= ymd(Date),month=month(Date),year=year(Date),Time=ym(paste(year,month)))
sample_data(sasay)<- sample_data(sasa_meta2)
View(sasa_meta2)
#original physeq is sasay
sasa_meta2 <- read.xlsx("sasa_meta.xlsx",detectDates = TRUE)%>%
mutate(Date= ymd(Date),month=month(Date),year=year(Date),Time=ym(paste(year,month)))
rownames(sasa_meta2)<-sasa_meta2$SampleID
sample_data(sasay)<- sample_data(sasa_meta2)
#physeq without possible contamination
sasay2<- subset_samples(sasay,Contamin=="F")
unifrac=ordinate(sasay2, "PCoA", "unifrac", weighted=FALSE)
p1=plot_ordination(sasay2, unifrac,type="samples", color="Season", title = "Weighted Unifrac")+theme_classic()+geom_point(size=3)+scale_color_manual(values=col)+ theme(text=element_text(size=14))+theme(legend.text=element_text(size=12))
p1
wunifrac=ordinate(sasay2, "PCoA", "unifrac", weighted=TRUE)
p2=plot_ordination(sasay2, wunifrac,type="samples", color="Season", title = "Weighted Unifrac")+theme_classic()+geom_point(size=3)+scale_color_manual(values=col)+ theme(text=element_text(size=14))+theme(legend.text=element_text(size=12))
p2
bray=ordinate(sasay2, "NMDS", "bray")
p3=plot_ordination(sasay2, bray,type="samples", color="Season", title = "Weighted Unifrac")+theme_classic()+geom_point(size=3)+scale_color_manual(values=col)+ theme(text=element_text(size=14))+theme(legend.text=element_text(size=12))
p3
p1
p2
p3
View(sasa_meta2)
p1=plot_ordination(sasay2, unifrac,type="samples", color="Kagai.level", title = "unWeighted Unifrac")+theme_classic()+geom_point(size=3)+scale_color_manual(values=col)+ theme(text=element_text(size=14))+theme(legend.text=element_text(size=12))
p1
wunifrac=ordinate(sasay2, "PCoA", "unifrac", weighted=TRUE)
wunifrac=ordinate(sasay2, "PCoA", "unifrac", weighted=TRUE)
p2=plot_ordination(sasay2, wunifrac,type="samples", color="Kagai.level", title = "Weighted Unifrac")+theme_classic()+geom_point(size=3)+scale_color_manual(values=col)+ theme(text=element_text(size=14))+theme(legend.text=element_text(size=12))
wunifrac=ordinate(sasay2, "PCoA", "unifrac", weighted=TRUE)
p2=plot_ordination(sasay2, wunifrac,type="samples", color="Kagai.level", title = "Weighted Unifrac")+theme_classic()+geom_point(size=3)+scale_color_manual(values=col)+ theme(text=element_text(size=14))+theme(legend.text=element_text(size=12))
p3=plot_ordination(sasay2, bray,type="samples", color="Kagai.level", title = "Brau")+theme_classic()+geom_point(size=3)+scale_color_manual(values=col)+ theme(text=element_text(size=14))+theme(legend.text=element_text(size=12))
require(ggpubr)
ggarrange(p1,p2,p3,nrow=3)
jac=ordinate(sasay2, "NMDS", "jaccard")
p4=plot_ordination(sasay2, jac,type="samples", color="Kagai.level", title = "Jaccard")+theme_classic()+geom_point(size=3)+scale_color_manual(values=col)+ theme(text=element_text(size=14))+theme(legend.text=element_text(size=12))
p4
plot_distances = function(p = GlobalPatterns, m = "wunifrac", s = "X.SampleID", d = "SampleType") {
require("phyloseq")
require("tidyverse")
require("dplyr")
# calc distances
wu.m = phyloseq::distance(p, m) %>%
as.matrix() %>%
as.data.frame() %>%
rownames_to_column("Var1") %>%
pivot_longer(cols = c(everything(), -Var1), names_to = "Var2", values_to = "value") %>%
filter(as.character(Var1) != as.character(Var2))
# get sample data (S4 error OK and expected)
sd = data.frame(sample_data(p)) %>%
select(s, d) %>%
mutate_if(is.factor, as.character)
# combined distances with sample data
colnames(sd) = c("Var1", "Type1")
wu.sd = left_join(wu.m, sd, by = "Var1")
colnames(sd) = c("Var2", "Type2")
wu.sd = left_join(wu.sd, sd, by = "Var2")
# plot
plot_object = ggplot(wu.sd, aes(x = Type2, y = value)) +
theme_bw() +
geom_point() +
geom_boxplot(aes(color = ifelse(Type1 == Type2, "red", "black"))) +
scale_color_identity() +
facet_wrap(~ Type1, scales = "free_x") +
theme(axis.text.x=element_text(angle = 90, hjust = 1, vjust = 0.5)) +
labs(title = paste0("Distance Metric = ", m), y = m, x = d)
# rename dataframe back to original names
s1 = paste(s, "1", sep = "_")
s2 = paste(s, "2", sep = "_")
d1 = paste(d, "1", sep = "_")
d2 = paste(d, "2", sep = "_")
df = wu.sd %>%
dplyr::rename(!!s1 := "Var1") %>%
dplyr::rename(!!s2 := "Var2") %>%
dplyr::rename(!!d1 := "Type1") %>%
dplyr::rename(!!d2 := "Type2")
l = list("plot" = plot_object)
return(l)
}
plot_distances(sasay,"uunifrac",s="SampleID",d="Kagai.level")
plot_distances(sasay2,"uunifrac",s="SampleID",d="Kagai.level")
plot_distances(sasay2,"uunifrac",s="SampleID",d="Season")
ggarrange(p1,p2,p3)
plot_distances(sasay2,"uunifrac",s="SampleID",d="Kagai.level")
plot_distances(sasay2,"uunifrac",s="SampleID",d="Kagai.level")
unifrac=ordinate(sasay2, "PCoA", "unifrac", weighted=FALSE)
unifrac.df <- unifrac$vectors %>% data.frame
unifrac.df <- merge(unifrac.df, data.frame(sample_data(sasay2)), by.x=0, by.y=0, sort=F) %>% column_to_rownames("Row.names")
plot_ly(unifrac.df, x = ~Axis.1, y = ~Axis.2, z = ~Axis.3,color=~Season,colors=c("#EC6A5C","#77AAAD","#FFCC99"))
nmds <- metaMDS(t(otu_table(sasay)), "bray",k=3)
data.scores <- as.data.frame(scores(nmds))
data.scores$sample_id <- rownames(data.scores)
data.scores <- merge(data.scores, data.frame(sample_data(sasay)), by.x="sample_id", by.y=0, sort=F)
plot_ly(data.scores, x = ~NMDS1, y = ~NMDS2, z = ~NMDS3,color=~Season,colors=c("#EC6A5C","#77AAAD","#FFCC99"))
setwd("~/Documents/GitHub/wanyi23333.github.io")
